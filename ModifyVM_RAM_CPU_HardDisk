//:: # Author: P Kiran Kumar
//:: # Product/Feature: VC/ESXi
//:: # Description: Modify VM RAM, CPU and HardDisk at a time with specified values using vSphere java API. 

import java.net.URL;

import com.vmware.vim25.Description;
import com.vmware.vim25.VirtualDevice;
import com.vmware.vim25.VirtualDeviceBackingInfo;
import com.vmware.vim25.VirtualDeviceConfigSpec;
import com.vmware.vim25.VirtualDeviceConfigSpecOperation;
import com.vmware.vim25.VirtualDisk;
import com.vmware.vim25.VirtualDiskFlatVer2BackingInfo;
import com.vmware.vim25.VirtualMachineConfigInfo;
import com.vmware.vim25.VirtualMachineConfigSpec;
import com.vmware.vim25.mo.Datastore;
import com.vmware.vim25.mo.Folder;
import com.vmware.vim25.mo.HostSystem;
import com.vmware.vim25.mo.InventoryNavigator;
import com.vmware.vim25.mo.ServiceInstance;
import com.vmware.vim25.mo.Task;
import com.vmware.vim25.mo.VirtualMachine;

/**
 * Input & Steps::
 * 1) CPU(numCPUs) - Provide num of cpus count,it never exceed host supported num of cpus
 * 2) RAM(ramMB) - Provide ram value in MB, it never exceed host max alloted memory
 * 3) HardDisk(diskCapacityinKB) - Provide harddisk value in KB, it never exceeds harddisk datastore freeDiskSpace.
 * 4) harddiskName - Eg- "Hard disk 2" or "Hard disk 3"
 * Note1:: It is recommended to assign for harddiskName should start from "Hard disk 2",because "Hard disk 1" contains the OS data and sometimes contains snapshots, will not allowed to extend disk.
 * Note2:: For PowerON VM- Before modify RAM/CPU it is mandatory to enable the VM Memory Hot Add & CPU Hot Plug feature and also VM OS supports.
 */
public class ModifyVM_RAM_CPU_HardDisk {
	public static void main(String[] args) {
		String IPAddress = "10.10.10.1"; // VC/ESXi ipaddress/hostname
		String userName = "Administrator@vsphere.local"; // VC/ESXi username
		String passwd = "jsdhdjksjksdnuj"; // VC/ESXi password
		String vmName = "CentOS";// VM name
		int numCPUs = 6; // cpus count
		long ramMB = 3000; // total Ram
		long diskCapacityinKB = 4000000;// HardDisk capacity in KB
		String harddiskName = "Hard disk 2"; // Name of the Hard disk to extend,Eg- "Hard disk 2" or "Hard disk 3"...
		ServiceInstance si = null;
		String waitStr = null;
		try {
			si = new ServiceInstance(new URL("https://" + IPAddress + "/sdk"),
					userName, passwd, true);
			Folder rootFolder = si.getRootFolder();
			VirtualMachine vm = (VirtualMachine) new InventoryNavigator(
					rootFolder).searchManagedEntity("VirtualMachine", vmName);
			HostSystem hs = new HostSystem(si.getServerConnection(), vm
					.getRuntime().getHost());
			System.out.println("Host Name ::" + hs.getName());
			VirtualMachineConfigSpec vmConfigSpec = new VirtualMachineConfigSpec();
			if (isValidCPUCount(numCPUs, hs)) {
				vmConfigSpec.setNumCPUs(numCPUs);
			} else {
				System.out.println("NotAllowed::Provided cpu count " + numCPUs
						+ " is more then the host --> " + hs.getName()
						+ " cpu count "
						+ hs.getHardware().getCpuInfo().getNumCpuCores());
			}

			if (isValidRam(ramMB, hs)) {
				vmConfigSpec.setMemoryMB(ramMB);
			} else {
				System.out.println("NotAllowed::Provided ram " + ramMB
						+ " is more then the host --> " + hs.getName()
						+ " ram " + hs.getHardware().getMemorySize());
			}

			VirtualDeviceConfigSpec diskSpec = setVMHardDiskSpec(si, vm,
					diskCapacityinKB, harddiskName);
			if (diskSpec != null) {
				vmConfigSpec
						.setDeviceChange(new VirtualDeviceConfigSpec[] { diskSpec });
			}
			System.out.println("Before modify VM RAM , CPU , HardDisk ==>"
					+ vm.getConfig().getHardware().getMemoryMB() + " MB ,"
					+ vm.getConfig().getHardware().getNumCPU() + " CPU,"
					+ getVMHardDiskCapacity(vm, harddiskName));
			Task task = vm.reconfigVM_Task(vmConfigSpec);
			waitStr = task.waitForTask();
			if (waitStr != null && waitStr.equalsIgnoreCase("success")) {
				vm = (VirtualMachine) new InventoryNavigator(rootFolder)
						.searchManagedEntity("VirtualMachine", vmName);
				System.out.println("After modify VM RAM , CPU , HardDisk ==>"
						+ vm.getConfig().getHardware().getMemoryMB() + " MB ,"
						+ vm.getConfig().getHardware().getNumCPU() + " CPU,"
						+ getVMHardDiskCapacity(vm, harddiskName));
			} else {
				System.out.println("Error::VM Reconfig fail...");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		si.getServerConnection().logout();
	}

	public static boolean isValidCPUCount(int cpu, HostSystem hs) {
		int hostCpusCount = hs.getHardware().getCpuInfo().getNumCpuCores();
		if (cpu <= hostCpusCount) {
			return true;
		}
		return false;
	}

	public static boolean isValidRam(long ram, HostSystem hs) {
		long hostMem = hs.getHardware().getMemorySize() / (1024L * 1024L);
		if (ram < hostMem) {
			return true;
		}
		return false;
	}

	public static String getVMHardDiskCapacity(VirtualMachine vm,
			String harddiskName) {
		String hardDisk = null;
		VirtualMachineConfigInfo vmConfigInfo = (VirtualMachineConfigInfo) vm
				.getConfig();
		VirtualDevice[] vDevice = vmConfigInfo.getHardware().getDevice();
		for (int i = 0; i < vDevice.length; i++) {
			Description vDetails = vDevice[i].getDeviceInfo();
			if (vDetails.getLabel().equalsIgnoreCase(harddiskName)) {
				hardDisk = vDetails.getSummary();
			}
		}
		return hardDisk;
	}

	public static VirtualDeviceConfigSpec setVMHardDiskSpec(ServiceInstance si,
			VirtualMachine vm, long diskCapacityinKB, String harddiskName) {
		int ckey = 0;
		int unitNumber = 0;
		int key = 0;
		Datastore ds = null;
		VirtualDeviceConfigSpec diskSpec = new VirtualDeviceConfigSpec();
		VirtualMachineConfigInfo vmConfigInfo = (VirtualMachineConfigInfo) vm
				.getConfig();
		VirtualDisk disk = new VirtualDisk();
		VirtualDiskFlatVer2BackingInfo diskfileBacking = new VirtualDiskFlatVer2BackingInfo();
		VirtualDevice[] vDevice = vmConfigInfo.getHardware().getDevice();
		for (int k = 0; k < vDevice.length; k++) {
			if (vDevice[k].getDeviceInfo().getLabel()
					.equalsIgnoreCase(harddiskName)) {
				ckey = vDevice[k].getControllerKey();
				unitNumber = vDevice[k].getUnitNumber();
				key = vDevice[k].getKey();
				VirtualDeviceBackingInfo info = vDevice[k].getBacking();
				diskfileBacking = (VirtualDiskFlatVer2BackingInfo) info;
				break;
			}
		}
		ds = new Datastore(si.getServerConnection(),
				diskfileBacking.getDatastore());
		long freeDiskSpace = ds.getSummary().getFreeSpace();
		if (diskCapacityinKB < (freeDiskSpace / 1024)) {
			disk.setCapacityInKB(diskCapacityinKB);
		} else {
			System.out.println("NotAllowed::Provided diskCapacityinKB "
					+ diskCapacityinKB + " is more then the datastore  --> "
					+ ds.getName() + " freeDiskSpace "
					+ ds.getSummary().getFreeSpace() / 1024);
			diskSpec = null;
			return diskSpec;
		}
		disk.setControllerKey(ckey);
		disk.setUnitNumber(unitNumber);
		disk.setBacking(diskfileBacking);
		disk.setKey(key);
		diskSpec.setOperation(VirtualDeviceConfigSpecOperation.edit);
		diskSpec.setDevice(disk);
		return diskSpec;
	}

}
